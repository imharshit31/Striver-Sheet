class BSTIterator {
public:

    stack<TreeNode *> myStack;
    bool reverse = true; 

    BSTIterator(TreeNode *root, bool isReverse) {
        reverse = isReverse; 
        pushAll(root);
    }

    int next() {
        TreeNode *tmpNode = myStack.top();
        myStack.pop();
        if(!reverse) pushAll(tmpNode->right);
        else pushAll(tmpNode->left);
        return tmpNode->val;
    }

    void pushAll(TreeNode *node) {
        for(;node != NULL; ) {
             myStack.push(node);
             if(reverse == true) {
                 node = node->right; 
             } else {
                 node = node->left; 
             }
        }
    }
};

class Solution {
public:

    bool findTarget(TreeNode* root, int k) {
        
        if(!root) return false; 

        BSTIterator l(root, false), r(root, true); 
        
        int i = l.next(), j = r.next(); 

        while(i<j) {
            if(i + j == k) return true; 
            else if(i + j < k) i = l.next(); 
            else j = r.next(); 
        }

        return false; 
    }
};
