#include <bits/stdc+.h>
using namespace std;

struct minHeap{
  
  int arr[], size, cap;
  
  minHeap(int c){
      arr=new int[c];
      size=0;
      cap=c;
  }
  
  int left(int i) { return 2*i+1 };
  int right(int i) { return 2*i+2 };
  int parent(int i) { return (i-1)/2; };
  
  void insert(int v){
      if(size==cap) return;
      arr[size]=v;
      size++; 
      for(int i=size-1;i!=0 and arr[parent(i)]>arr[i];i=parent(i))
          swap(arr[i],arr[parent(i)]);
  }
  
  void minHeapify(int i){
      int li=left(i),ri=right(i),smallest=i;
      
      if(li<size and arr[li]<arr[smallest]) smallest=li;
      if(ri<size and arr[ri]<arr[smallest]) smallest=ri;
      
      if(smallest!=i){
          swap(arr[i],arr[smallest]);
          minHeapify(smallest);
      }
  }
  
  int extractMin(){
      if(!size) return INT_MAX;
      if(size==1){
          size--;
          return arr[0];
      }
      swap(arr[0],arr[size-1]);
      size--;
      minHeapify(0);
      return arr[size];
  }
  
  void decreaseKey(int i, int x){
      arr[i]=x;
      while(i and arr[parent(i)]>arr[i]){
          swap(arr[i],arr[parent(i)]);
          i=parent(i);
      }
  }
  
  void buildHeap(){
      for(int i=(size-2)/2;i>=0;i--){
          minHeapify(i);
      }
  }
    
};

int main() {
    
    
    
    return 0;
}
