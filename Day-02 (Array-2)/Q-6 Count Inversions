long long inv=0;
    
void conquer(long long *arr, long long s, long long m, long long e){

    vector<long long> merged;
    long long i1=s,i2=m+1;

    while(i1 <= m and i2<=e){
        if(arr[i1]<=arr[i2]) merged.push_back(arr[i1++]);
        else{
            inv += m+1-i1;
            merged.push_back(arr[i2++]);
        }
    }

    while(i1<=m) merged.push_back(arr[i1++]);
    while(i2<=e) merged.push_back(arr[i2++]);

    int s2=s;

    for(auto a: merged) arr[s2++]=a;
}

void divide(long long *arr, long long s, long long e){

    if(s>=e) return;

    int m= s+(e-s)/2;
    divide(arr,s,m);
    divide(arr,m+1,e);

    conquer(arr,s,m,e);
}

long long int inversionCount(long long arr[], long long N){

    divide(arr,0,N-1);
    return inv;
}
