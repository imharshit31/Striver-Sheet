#include <bits/stdc++.h>
using namespace std;

struct QueueUsingStacks{
    
   stack<int> stk1,stk2;
    
    void push(int x){
        while(stk1.size()){
            stk2.push(stk1.top());
            stk1.pop();
        }
        stk1.push(x);
        while(stk2.size()){
            stk1.push(stk2.top());
            stk2.pop();
        }
    }
    
    void pop(){
        stk1.pop();
    }
    
    int size(){
        return stk1.size();
    }
    
    int front(){
        return stk1.top();
    }
    
    bool empty(){
        return stk1.size()==0;
    }
    
};

struct QueueUsingStacksOpt{

    //Push and Pop O(1) amortized 
    
    stack<int> ip,op;
    
    void push(int x){
        ip.push(x);
    }
    
    void pop(){
        if(op.size()){
            op.pop();
        }else{
            while(ip.size()){
                op.push(ip.top());
                ip.pop();
            }
            op.pop();
        }
    }
    
    int size(){
        return ip.size()+op.size();
    }
    
    int front(){
        int ans;
        if(op.size()){
            ans=op.top(); 
        }else{
            while(ip.size()){
                op.push(ip.top());
                ip.pop();
            }
            ans=op.top();
        }
        return ans;
    }
    
    bool empty(){
        return ip.size()+op.size()==0;
    }
    
};

int main() {
    
    //QueueUsingStacks q;
    QueueUsingStacksOpt q;
    
    q.push(1);
    q.push(2);
    q.push(3);
    q.push(4);
    q.push(5);
    
    cout<<q.size()<<endl;
    cout<<q.empty()<<endl;
    
    while(q.size()){
        cout<<q.front()<<endl;
        q.pop();
    }
    
    return 0;
}
